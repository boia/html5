	这里，我们将开始矩阵(matrix)的学习
	矩阵经常被用在3D系统中，用于旋转、缩放和变换(移动)3D点。它们也经常用于各种2D图形的变换

1.矩阵基础
	
	简单地说，一个矩阵是一组数字网络。它可以有一个或更多水平行和一个或更多的垂直列

2.矩阵运算

	介绍一些包含有意义值的矩阵，然后描述如何去操作它们

2.1.矩阵加法

	矩阵中较常见的用法是控制3D中的点，一个3D包括x、y和z位置的数值，可以视为1*3的矩阵，如下：
	x y z
	现在假设你想在空间上移动这个点，也称为变换这个店，你需要知道的是在每个轴上移动多少，你可以把这放在一个变换矩阵中，这是另一个1*3的矩阵，如下:
	dx dy dz

	这里是在每个轴上移动的距离，进行换算你又可以得到变换后的一个1*3的矩阵
	x y z + dx dy dz = (x+dx)(y+dy)(z+dz)
	
	其他变换的值都是这个理。

2.2.矩阵乘法

	对于3D变换最常见的是矩阵乘法，通常用于缩放和旋转。

2.2.1.使用矩阵缩放
	首先你需要知道一个物体已存在的宽、高和深度――换句话说，就是在3个轴向上大小的度量，这是一个3*5的矩阵:
	w h d
	代表着宽、高和深度，接下来你需要一个像这样的缩放矩阵:
	sx 0 0
	0 sy 0
	0 0 sz
	这里，sx，sy和sz是特定轴上缩放的百分比，这些是分数或小数，那么1.0就是100%，2.0就是200%，0.5就是50%

	为什么要这样排布呢？矩阵的乘法还是需要有所了解的:
	
		 sx 0 0 
	w h d *  0 sy 0
		 0  0 sz
	这产生了下面的矩阵作为结果:
	(w*sx) (h*sy) (d*sz)

	这看上去很好，在使用x的比例因子乘以宽，使用y的比例因子乘以高，还使用z的比例因子乘以深度。但是，所有的0都是偶然现象，因此我们把它抽象为更清晰的模式
		a b c
	u v w * d e f	
		g h i
	现在你可以看到模式以这种结果出现

	(u*a+v*d+w*g) (u*b+v*e+w*h) (u*c+v*f+w*i)
	现在让我们看矩阵乘法的真是应用――坐标旋转

2.2.2.使用矩阵的坐标旋转

	首先，你需要知道你的3D点矩阵:
	x y z
	这将保存你想要旋转点的坐标。当然，现在你需要一个旋转矩阵，如你所知道的，你可以在3个轴中的任何一个轴上旋转，你可以为任何一个轴上的旋转创建一个单独的矩阵。
	让我们以x轴开始
	1  0    0
	0 cos  sin
	0 -sin cos

		1  0    0
	x y z *	0 cos  sin
		0 -sin cos
	得到了 (x) (y*cos-z*sin) (y*sin+z*cos)

	这是不是很熟悉？是的，正是坐标转换，x坐标不变，y和z变化，正是饶x轴旋转的一个矩阵
	你也一样可以创建出饶y轴、z轴旋转的矩阵

2.2.3.编码

	现在你已经了解的够多的了，那么就用矩阵编程吗，矩阵在代码中怎么表示呢？其实你已经明白了，没错，就是数组

3.Matrix类

	在flash中有内置的Matrix类，那么何不在HTML5中自己写一个这样的类呢