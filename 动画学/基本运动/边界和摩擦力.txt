
1.环境边界

	如果某个物体移出了某个空间，要想继续看见这个物体，现在你有一个选择，可以通过一些方法将它移回这个区域中。另一种选择就是跟随它，换一个角度说，就是移动空间来跟随物体。


1.1.设置边界

	舞台是有边界的，超过这个边界不做任何处理的话，物体会消失离开边界，所以用if else判断，然后处理

1.2.移除物体

	如果你总是不断地有新的物体生成，当某个物体移出边界时移除它是非常有用的，你不能让太多的物体同时移动，将会导致浏览器变慢。
	clearRect()可以帮助你，但是移除一个显示对象并不是销毁它，真想从内存中移除一个对象，你应当调用delete清除它。
	如果动画在事件中处理，那么调用removeEventListener()可以清除事件
	
	你可能使用ball.x而没有考虑它的半径，整体还没离开舞台就消失了。	

	多个物体运动的话，可以放到一个数组里，然后移除的物体使用数组对象的splice()方法


1.3.重新生成物体

	让出界的物体重新的回到舞台中，比如一个喷泉一样，发射出去出界然后回到起始点重新发射(有重力效果)


1.4.屏幕折回

	下一个常用的控制物体移出边界的方式是屏幕折回，概念很简单，如果一个物体移出了屏幕左边的边界，会在右边重新出现。如果移出了右边的边界，会重新回到左边，如果超出了上边界，会在底端重新出现。

1.5.回弹
	检测物体什么时候离开舞台，然后改变角度就行了，甚至更简单的办法就是改变一个轴上的速度就o了

	简单的思路是  vx *= -1; vy *= -1;
	不过按照平常物理的想法，物体碰撞到边界反弹是会损失能量的，所以速度会减小。


实例	https://github.com/boia/html5/blob/animation/动画学/基本运动/边界.html


2.摩擦力

	你有两种方案：
	①物体以它所拥有的速度简单地移动，直到碰到一个边界。
	②物体自身或是某个外力使物体产生加速度，改变了它的速度

	除非物体是被拉或者退，才会改变速度，但是现实中并不是这样的，摩擦力会改变物体的速率。
	有两种方法可以使用代码执行摩擦力，推荐使用容易的方法。

2.1.摩擦力，正确的方法

	你需要从速度的大小或速率中减掉它，不能单独地从x轴和y轴上减去摩擦力。
	所以你必须找到合成速度的大小和方向

	或许减小合速度是一个有效的办法，但是有一个比较容易的办法就是同时减小x轴和y轴的速度，
	vx *= friction; vy *= friction;

实例	https://github.com/boia/html5/blob/animation/动画学/基本运动/摩擦力.html


本章小结
	本章涉及了一个物体与它自身的环境的交互――确切的说，一个物体与它的领域的边界和它的领域自身的交互，你可以使你的物体移动起来更具有真实感。

